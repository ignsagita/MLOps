name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        flake8 train.py api.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 train.py api.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check --diff train.py api.py

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        python -m pytest test_*.py -v --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  train-smoke:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set random seed for reproducibility
      run: |
        python -c "import random; import numpy as np; random.seed(42); np.random.seed(42); print('Seeds set')"

    - name: Run training smoke test
      run: |
        python train.py --smoke-test

    - name: Verify model artifacts
      run: |
        ls -la model.pkl metrics.json training_info.json

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts
        path: |
          model.pkl
          metrics.json
          training_info.json
        retention-days: 7

  api-smoke:
    runs-on: ubuntu-latest
    needs: [train-smoke]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: model-artifacts

    - name: Verify artifacts
      run: |
        ls -la model.pkl metrics.json training_info.json

    - name: Test API health endpoint
      run: |
        python -c "
        import requests
        import threading
        import time
        import subprocess

        # Start API server in background
        proc = subprocess.Popen(['python', 'api.py'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # Wait for server to start
        time.sleep(3)

        try:
            # Test health endpoint
            response = requests.get('http://localhost:8080/health', timeout=5)
            print(f'Health check status: {response.status_code}')
            print(f'Health response: {response.json()}')
            assert response.status_code == 200
            assert 'status' in response.json()
            assert response.json()['status'] == 'ok'
            print('✓ Health endpoint test passed')
        except Exception as e:
            print(f'✗ Health endpoint test failed: {e}')
            raise
        finally:
            proc.terminate()
            proc.wait()
        "

    - name: Test API predict endpoint
      run: |
        python -c "
        import requests
        import json
        import subprocess
        import time

        # Start API server in background
        proc = subprocess.Popen(['python', 'api.py'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # Wait for server to start
        time.sleep(3)

        try:
            # Test predict endpoint with sample data
            sample_data = {
                'age': 0.02, 'sex': -0.044, 'bmi': 0.06, 'bp': -0.03,
                's1': -0.02, 's2': 0.03, 's3': -0.02, 's4': 0.02,
                's5': 0.02, 's6': -0.001
            }
            response = requests.post(
                'http://localhost:8080/predict',
                json=sample_data,
                timeout=5
            )
            print(f'Predict status: {response.status_code}')
            print(f'Predict response: {response.json()}')
            assert response.status_code == 200
            assert 'prediction' in response.json()
            assert isinstance(response.json()['prediction'], (int, float))
            print('✓ Predict endpoint test passed')
        except Exception as e:
            print(f'✗ Predict endpoint test failed: {e}')
            raise
        finally:
            proc.terminate()
            proc.wait()
        "